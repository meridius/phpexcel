<?xml version="1.0" encoding="UTF-8"?>
<project name="meridius-phpexcel" default="build">

<property name="tester" value="${basedir}/vendor/bin/tester" />
<property name="linter" value="${basedir}/vendor/bin/parallel-lint" />
<property name="pdepend" value="${basedir}/vendor/bin/pdepend" />
<property name="phpcpd" value="${basedir}/vendor/bin/phpcpd" />
<property name="phpcs" value="${basedir}/vendor/bin/phpcs" />
<property name="phploc" value="${basedir}/vendor/bin/phploc" />


<!-- RUN CONFIGURATIONS -->

<target name="basic-build" 
    depends="prepare,lint,check,test" />

<target name="quick-build"
    depends="prepare,lint,test"
    description="Performs a lint check and runs the tests (without generating code coverage reports)" />

<target name="full-build"
    depends="prepare,static-analysis"
    description="Performs static analysis, runs the tests" />

    <target name="static-analysis"
        depends="lint,phploc-ci,pdepend,phpcs-ci,phpcpd-ci"
        description="Performs static analysis" />

<target name="full-build-parallel"
    depends="prepare,static-analysis-parallel"
    description="Performs static analysis (executing the tools in parallel), runs the tests" />

    <target name="static-analysis-parallel"
        description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <!-- Adjust the threadCount attribute's value to the number of CPUs -->
            <sequential>
                <antcall target="pdepend" />
            </sequential>
            <antcall target="lint" />
            <antcall target="phpcpd-ci" />
            <antcall target="phpcs-ci" />
            <antcall target="phploc-ci" />
        </parallel>
    </target>


<!-- MAINTENANCE JOBS -->

<target name="prepare" 
    unless="prepare.done" 
    depends="clean,composer"
    description="Prepare for build">
    <mkdir dir="${basedir}/build/api" />
    <mkdir dir="${basedir}/build/coverage" />
    <mkdir dir="${basedir}/build/logs" />
    <mkdir dir="${basedir}/build/pdepend" />
    <property name="prepare.done" value="true" />
</target>

<target name="clean" 
    unless="clean.done" 
    description="Cleanup build artifacts">
    <delete dir="${basedir}/build" />
    <property name="clean.done" value="true" />
</target>

<target name="composer" 
    unless="composer.done" 
    description="Installing project dependencies by composer">
    <exec executable="composer" failonerror="true">
        <arg value="update" />
        <arg value="--no-interaction" />
        <arg value="--prefer-dist" />
    </exec>
    <property name="composer.done" value="true" />
</target>


<!-- BACIC JOBS -->

<target name="lint" 
    depends="composer"
    unless="lint.done" 
    description="Running php-parallel-lint">
    <exec executable="${linter}">
        <arg value="-e" />
        <arg value="php,phpt" />
        <arg value="--exclude" />
        <arg path="${basedir}/vendor" />
        <arg path="${basedir}/." />
    </exec>
    <property name="lint.done" value="true" />
</target>

<target name="check" 
    unless="check.done" 
    description="Running nette/code-checker">
    <exec executable="composer">
        <arg value="create-project" />
        <arg value="--prefer-source" />
        <arg value="--no-interaction" />
        <arg value="nette/code-checker" />
        <arg value="vendor/code-checker" />
    </exec>
    <exec executable="php">
        <arg value="vendor/code-checker/src/code-checker.php" />
        <arg value="-d" />
        <arg path="${basedir}/src" />
    </exec>
    <exec executable="php">
        <arg value="vendor/code-checker/src/code-checker.php" />
        <arg value="-d" />
        <arg path="${basedir}/tests" />
    </exec>
    <property name="check.done" value="true" />
</target>

<target name="test" 
    depends="composer"
    unless="test.done" 
    description="Running nette/tester">
    <exec executable="${tester}">
        <arg value="-s" />
        <arg value="-c" />
        <arg path="${basedir}/tests/php-unix.ini" />
        <arg path="${basedir}/tests" />
    </exec>
    <property name="test.done" value="true" />
</target>


<!-- ADDITIONAL JOBS -->

<target name="pdepend"
    unless="pdepend.done"
    depends="prepare"
    description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${pdepend}" taskname="pdepend">
        <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
        <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
        <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
        <arg path="${basedir}/src" />
    </exec>
    <property name="pdepend.done" value="true" />
</target>

<target name="phploc"
    unless="phploc.done"
    description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
    <exec executable="${phploc}" taskname="phploc">
        <arg value="--count-tests" />
        <arg path="${basedir}/src" />
        <arg path="${basedir}/tests" />
    </exec>
    <property name="phploc.done" value="true" />
</target>

<target name="phploc-ci"
    unless="phploc.done"
    depends="prepare"
    description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phploc}" taskname="phploc">
        <arg value="--count-tests" />
        <arg value="--log-csv" />
        <arg path="${basedir}/build/logs/phploc.csv" />
        <arg value="--log-xml" />
        <arg path="${basedir}/build/logs/phploc.xml" />
        <arg path="${basedir}/src" />
        <arg path="${basedir}/tests" />
    </exec>
    <property name="phploc.done" value="true" />
</target>

<target name="phpcs"
    unless="phpcs.done"
    description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${phpcs}" taskname="phpcs">
        <arg value="--standard=PSR2" />
        <arg value="--extensions=php" />
        <arg value="--ignore=autoload.php" />
        <arg path="${basedir}/src" />
        <arg path="${basedir}/tests" />
    </exec>
    <property name="phpcs.done" value="true" />
</target>

<target name="phpcs-ci"
    unless="phpcs.done"
    depends="prepare"
    description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
        <arg value="--report=checkstyle" />
        <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
        <arg value="--standard=PSR2" />
        <arg value="--extensions=php" />
        <arg value="--ignore=autoload.php" />
        <arg path="${basedir}/src" />
        <arg path="${basedir}/tests" />
    </exec>
    <property name="phpcs.done" value="true" />
</target>

<target name="phpcpd"
    unless="phpcpd.done"
    description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${phpcpd}" taskname="phpcpd">
        <arg path="${basedir}/src" />
    </exec>
    <property name="phpcpd.done" value="true" />
</target>

<target name="phpcpd-ci"
    unless="phpcpd.done"
    depends="prepare"
    description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phpcpd}" taskname="phpcpd">
        <arg value="--log-pmd" />
        <arg path="${basedir}/build/logs/pmd-cpd.xml" />
        <arg path="${basedir}/src" />
    </exec>
    <property name="phpcpd.done" value="true" />
</target>

</project>
